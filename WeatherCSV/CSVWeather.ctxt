#BlueJ class context
comment0.target=CSVWeather
comment0.text=\r\n\ Write\ a\ description\ of\ CSVWeather\ here.\r\n\ \r\n\ @author\ (your\ name)\ \r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=parser\ high\ category
comment1.target=org.apache.commons.csv.CSVRecord\ dualTemperatureOfDay(org.apache.commons.csv.CSVParser,\ java.lang.Boolean,\ java.lang.String)
comment1.text=\r\n\ Finds\ the\ lowest\ or\ highest\ of\ the\ given\ category\ in\ a\ single\ day.\r\n\ \r\n\ @param\ parser\ \ \ \ The\ CSVParser\ handed\ down.\r\n\ @param\ high\ \ \ \ \ \ The\ temperature\ basis,\ if\ high\ then\ we\ look\ for\ the\ highest\ value,\ else\ the\ lowest.\r\n\ @param\ category\ \ The\ category\ to\ be\ searched,\ (e.g.\ 'TemperatureF',\ 'Humidity').\r\n\ \r\n\ @return\ \ \ \ \ \ \ \ \ \ The\ CSVRecord\ handed\ up\ to\ main\ search\ method.\r\n
comment2.params=high\ category
comment2.target=org.apache.commons.csv.CSVRecord\ dualTemperatureOfManyDays(java.lang.Boolean,\ java.lang.String)
comment2.text=\r\n\ Finds\ the\ lowest\ or\ highest\ of\ the\ given\ category\ over\ multiple\ days.\r\n\ \r\n\ @param\ high\ \ \ \ \ \ The\ temperature\ basis,\ if\ high\ then\ we\ look\ for\ the\ highest\ value,\ else\ the\ lowest.\r\n\ @param\ category\ \ The\ category\ to\ be\ searched,\ (e.g.\ 'TemperatureF',\ 'Humidity').\r\n\ \r\n\ @return\ \ \ \ \ \ \ \ \ \ The\ CSVRecord\ handed\ up\ to\ main\ search\ method.\r\n
comment3.params=currentTemperature\ recordTemperature\ high\ category
comment3.target=org.apache.commons.csv.CSVRecord\ dualTemperatureComparison(org.apache.commons.csv.CSVRecord,\ org.apache.commons.csv.CSVRecord,\ java.lang.Boolean,\ java.lang.String)
comment3.text=\r\n\ Compares\ two\ values\ of\ a\ given\ category\ to\ find\ the\ desired\ value,\ highest\ or\ lowest.\r\n\ \r\n\ @param\ currentTemperature\ \ \ \ The\ current\ value\ in\ a\ record.\r\n\ @param\ recordTemperature\ \ \ \ \ The\ record\ value\ found\ so\ far.\r\n\ @param\ high\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ temperature\ basis,\ if\ high\ then\ we\ look\ for\ the\ highest\ value,\ else\ the\ lowest.\r\n\ @param\ category\ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ category\ to\ be\ searched,\ (e.g.\ 'TemperatureF',\ 'Humidity').\r\n
comment4.params=parser
comment4.target=void\ listAllTemperatures(org.apache.commons.csv.CSVParser)
comment5.params=
comment5.target=java.lang.String\ fileWithColdestTemperature()
comment6.params=
comment6.target=void\ testLowesetHumidityInFile()
comment7.params=
comment7.target=void\ testFileWithColdestTemp()
comment8.params=
comment8.target=void\ testColdestHourInFile()
comment9.params=
comment9.target=void\ testTemps()
numComments=10
